# This is the open-source optimization script provided by Apollo3D, based on magmaOffenburg Code release.
# author: Tianjian Jiang


# include some packages
import sys
import argparse
import cma
import os
import time
import subprocess
import numpy as np


# Load params from "origin_params.txt" to optimize
def load_params(origin_params_path):
    global param_names, param_nums
    with open(origin_params_path, 'r') as file1:
        for param in file1:
            if param != '\n':
                param_list = param.split("\t")
                param_name = param_list[0]
                param_num = param_list[1][:-1]
                if 'E' in param_num:
                    param_num = '0'

                if eval(param_num) == 0:
                    param_num = '0.001'

                param_names.append(param_name)
                param_nums.append(eval(param_num))
    file1.close()
    return

# Write the parameters which generated by CMA to files
def writeToFile(new_param_list, Param_dir, inputFile):
    global  param_names, param_nums
    running_param_dic = dict(zip(param_names, new_param_list))
    out_file = open(Param_dir + inputFile, 'w')
    for param_name, param_num in running_param_dic.items():
        out_file.write("{}\t{}\n".format(param_name, param_num))
    out_file.write("\n")
    out_file.close()


# Run the simulation
def run(new_param_list, Gen, Num):
    global job_status_table
    Pre_dir = "./Train_process"
    Param_dir = Pre_dir + '/params/'
    Results_dir = Pre_dir + '/results/'

    inputFile = "params_{0}_i_{1}.txt".format(Gen, Num)
    outputFile = "value_{0}_i_{1}.txt".format(Gen, Num)
    writeToFile(new_param_list, Param_dir, inputFile)
    command1 = ["nohup", "./start_training.sh"]
    if Num == 0:
        # Only one instance of RoboViz per generation
        command1.append("true")
    else:
        command1.append("false")
    command1 += [Param_dir+inputFile, Results_dir+outputFile, "&"]
    get_job_status()

    # We don't want too many jobs running at the same time
    while get_job_running() >= CPU_count:
        time.sleep(10)
        get_job_status()
    job_status_table[Num] = 1 # Running
    subprocess.Popen(command1, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def eva(ind, Gen, Num):
    # Quit the script if runs enough times.
    global run_time_now, run_times
    run_time_now += 1
    if run_time_now > run_times:
        sys.exit()

    # Generate a new set of parameters to run
    global param_names, param_nums
    new_param_list = []
    for x in range(0, ind.size):
        new_param_list.append(ind[x] * param_nums[x])

    # Run the Simulation
    run(new_param_list, Gen, Num)


def get_job_status():
    global job_status_table, CPU_count, Gen_size
    for i in range(Gen_size):
        Output_File = "./Train_process/results/value_{0}_i_{1}.txt".format(Current_Generation, i)
        if os.path.exists(Output_File):
            job_status_table[i] = 2 # Done

def get_job_running():
    global job_status_table, CPU_count, Gen_size
    Running_jobs = 0
    for i in range(Gen_size):
        if job_status_table[i] == 1:
            Running_jobs = Running_jobs + 1
    return Running_jobs

def get_job_Done():
    global job_status_table, CPU_count, Gen_size
    Done_jobs = 0
    for i in range(Gen_size):
        if job_status_table[i] == 2:
            Done_jobs = Done_jobs + 1
    return Done_jobs

def get_job_Idle():
    global job_status_table, CPU_count, Gen_size
    Idle_jobs = 0
    for i in range(Gen_size):
        if job_status_table[i] == 0:
            Idle_jobs = Idle_jobs + 1
    return Idle_jobs

def stop_Rest_jobs():
    kill_server = ["killall", "-9", "rcssserver3d"]
    kill_agent = ["./kill.sh"]
    subprocess.run(kill_server)
    subprocess.run(kill_agent)

def params_eva(ind):
    global Current_Generation, job_status_table
    Current_Generation += 1
    Pop_size = len(ind)
    return_list = []

    if not os.path.exists("./Train_process/params"):
        os.mkdir('./Train_process/params')
    if not os.path.exists("./Train_process/results"):
        os.mkdir('./Train_process/results')
    job_status_table = np.zeros(Pop_size)
    for i in range(Pop_size):
        params = ind[i]
        eva(params, Current_Generation, i)

    Cur_complete_jobs = 0
    while Cur_complete_jobs <= Pop_size * 0.7:
        time.sleep(60)
        get_job_status()
        Cur_complete_jobs = get_job_Done()
        print("{0} jobs has completed, {1} jobs running, {2} jobs idle".format(get_job_Done(), get_job_running(), get_job_Idle()))

    stop_Rest_jobs()

    for i in range(Pop_size):
        Output_File = "./Train_process/results" + "/value_{0}_i_{1}.txt".format(Current_Generation, i)
        if os.path.exists(Output_File):
            with open(Output_File, 'r') as file:
                content = file.read()
                return_list.append(0 - float(content))
            file.close()
        else:
            return_list.append(99999)
    return return_list




def main():
    global Gen_size, run_times, Current_Generation, run_sigma,job_status_table,CPU_count, run_time_now, param_names, param_nums
    parser = argparse.ArgumentParser(description="Input the cma options")
    parser.add_argument("--run_times", type=int, default=60000)
    parser.add_argument("--popsize", type=int, default=48)
    parser.add_argument("--sigma", type=float, default=0.1)
    args = parser.parse_args()
    run_times = args.run_times
    Gen_size = args.popsize
    CPU_count = os.cpu_count()
    run_sigma = args.sigma
    job_status_table = np.zeros(Gen_size)
    param_names = []
    param_nums = []
    run_time_now = 0
    Current_Generation = 0
    if not os.path.exists("./Train_process"):
        os.mkdir('./Train_process')
    load_params('origin_params.txt')
    cma.fmin(None, len(param_names) * [1.0], sigma0=run_sigma, options={'popsize': Gen_size}, parallel_objective=params_eva)


if __name__ == "__main__":
    main()
